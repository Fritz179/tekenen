use image::{io::Reader as ImageReader, GenericImageView};

pub fn preload_image(path: &str) -> Value {
    println!("Loading image: {path}");

    println!("cargo:rerun-if-changed={path}");

    let img = ImageReader::open(path).unwrap().decode().unwrap();

    let mut vec = vec![];

    for y in 0..img.height() {
        for x in 0..img.width() {
            let color = img.get_pixel(x, y);
            vec.push(color[0]);
            vec.push(color[1]);
            vec.push(color[2]);
            vec.push(color[3]);
        }
    };

    let width = img.width();
    let height = img.height();

    (
        "tekenen::Tekenen".to_owned(),
        format!("tekenen::Tekenen::from_pixels({width}, {height}, vec!{:?})", vec)
    )
}

type Value = (String, String);

pub fn preload(file_name: &str, shape: Value) {

    let data = format!("// This file is computer generated by preloader, please do not modify.
// Please consider modifying the build.rs, 

pub struct PreloadStructure {}

pub fn load_preloaded() -> PreloadStructure {{
    PreloadStructure {}
}}
", shape.0, shape.1);

    println!("{data}");
    std::fs::write(file_name, data).unwrap();
}

pub fn preload_object(shape: Vec<(&str, Value)>) -> Value {
    let mut data_type = "{\n".to_owned();
    let mut value = "{\n".to_owned();

    for (name, (shape, inner_value)) in shape {
        data_type.push_str(&format!("pub {name}: {shape},\n"));
        value.push_str(&format!("{name}: {inner_value},\n"));
    }
    
    data_type.push('}');
    value.push('}');

    (data_type, value)
}
